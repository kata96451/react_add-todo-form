{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","props","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","todosWithUser","userId","usersFromServer","find","App","useState","selectValue","setSelectValue","inputValue","setInputValue","setTodos","isValidInput","setIsValidInput","isValidSelect","setIsValidSelect","action","method","onSubmit","e","preventDefault","trim","maxId","Math","max","selectedUserById","createdTodo","prevTodo","type","placeholder","value","onChange","target","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99171a47.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { FC } from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User | null,\n};\n\nexport const UserInfo: FC<Props> = (props) => {\n  const { user } = props;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: FC<Props> = (props) => {\n  const { todo } = props;\n\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames(\n        'TodoInfo', todo.completed ? 'TodoInfo--completed' : null,\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      <UserInfo user={todo.user} />\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: FC<Props> = (props) => {\n  const { todos } = props;\n\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { FormEvent, useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\n\nfunction getUser(userId: number): User | null {\n  return usersFromServer.find(user => user?.id === userId) || null;\n}\n\nconst todosWithUser: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [selectValue, setSelectValue] = useState(0);\n  const [inputValue, setInputValue] = useState('');\n  const [todos, setTodos] = useState(todosWithUser);\n  const [isValidInput, setIsValidInput] = useState(true);\n  const [isValidSelect, setIsValidSelect] = useState(true);\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n\n    if (selectValue === 0) {\n      setIsValidSelect(false);\n    }\n\n    if (!inputValue.trim()) {\n      setIsValidInput(false);\n    }\n\n    if (!inputValue.trim() || selectValue === 0) {\n      return;\n    }\n\n    const maxId = Math.max(...todos.map(todo => todo.id)) + 1;\n    const selectedUserById = usersFromServer.find(\n      user => user.id === selectValue,\n    );\n\n    const createdTodo: Todo = {\n      id: maxId,\n      title: inputValue,\n      completed: false,\n      userId: selectValue,\n      user: selectedUserById || null,\n    };\n\n    setTodos(prevTodo => ([...prevTodo, createdTodo]));\n    setSelectValue(0);\n    setInputValue('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"to do\"\n            value={inputValue}\n            onChange={(e) => {\n              setInputValue(e.target.value);\n              setIsValidInput(true);\n            }}\n          />\n          {!isValidInput && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectValue}\n            onChange={(e) => {\n              setSelectValue(Number(e.target.value));\n              setIsValidSelect(true);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {!isValidSelect && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}